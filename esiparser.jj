options {
  STATIC = false;

}
PARSER_BEGIN(EsiParser)
import java.io.PrintStream ;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.*;

class EsiParser {
    public static void main(String[] args) throws ParseException, TokenMgrError {
        //Reader reader = new StringReader(args[0]);
        EsiParser parser = new EsiParser(System.in);
        parser.Start(System.out);
    }
    String output;
    HashMap<String, Composant> composants = new HashMap<String, Composant>();
    AttributFactory attFactory = new AttributFactory();
}
PARSER_END(EsiParser)

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n"}
TOKEN : 
{ < #LETTER : ["a"-"z"] | ["A"-"Z"]  > 
| < NUMBER : (["0"-"9"])+  >
| < SEMICOLON : ";" >
| < DOUBLEDOT : ":" >
| < EQUAL : "=" >
| < NOTEQUAL : "<>" >
| < DOUBLEDOUBLEDOT : <DOUBLEDOT> <DOUBLEDOT> >
| < ASSIGN : <DOUBLEDOT> <EQUAL> >
| < OPENTAG : "{" >
| < CLOSETAG : "}" >
| < OPENPAR : "(" >
| < CLOSEPAR : ")" >
| < COMMA : "," >
| < IF : "if" >
| < THEN : "then" >
| < DEBUT : "DEBUT" >
| < FIN : "FIN" >
| < INTERFACE : "INTERFACE" >
| < INIT : "INITIALISATIONS" >
| < ACT : "ACTIONS" >
| < PLUS : "+" >
| < ACTION : "Click" | "DbClick" | "ChrKeyPress" | "NumKeyPress" | "EntrerKeyPress" | "Drag" | "Drop" >
| <NEXTACTION : ";" | "~">
| < COMP : "COMP" >
| < OPERATION : "-" | "/" | "*" >
| < EVET : "EVET" | "EVT" > 
| < PROP : "PROP">
| <COMPONENT : "Fenêtre" | "boite Dialogue" | "panel" | "Bouton" | "Champs Texte" |
                "Combo Box" | "Liste Déroulante" | "case A cochet" | "Bouton Radio" | "Icône" >
| < ID : (<LETTER>)+(<LETTER>|<NUMBER>)*  >
                 }

void Start(PrintStream printStream) :
{}
{
    Interface()
    Inits()
    Actions()
    <FIN>
    { System.out.println("Compilation ended with success."); }
}

String ReadVal(Token t) :
{}
{
    { return String.valueOf(t.image); }
}

void Interface() :
{
    Composant comp = null;
}
{
    <DEBUT> <INTERFACE>
    (
        comp = Comp()
        (
            <PROP>
            Prop(comp)
            <EVET>
            Evet(comp)
        )
    )+
} 

void Inits() :
{
    Token t;
    String name, prop, val;
}
{
    <INIT>
    (
        t=<ID> {name=ReadVal(t);} 
        <DOUBLEDOUBLEDOT> t=<ID> {prop=ReadVal(t);} 
        <ASSIGN> 
        (
            t=<ID>
            |
            t=<NUMBER>
        )
        {
            val = ReadVal(t);
            if(composants.containsKey(name)){
                Composant comp = composants.get(name);
                Attribut attr = getAttribut(comp, prop);
                attr.setValue(val);
            }else{
                System.out.println("Erreur: Composant inexistant.");
                System.exit(0);
            }
        }
        <SEMICOLON> 
    )+
}

void Actions() :
{}
{
    <ACT>
    (Expression())+
}

Composant Comp() :
{
    Token t;
    String id, id2, com;
    Composant comp = null;
}
{
    <COMP> t=<ID> { id = ReadVal(t); } <DOUBLEDOT> t=<COMPONENT> 
    { 
        com = ReadVal(t); 
        //composant name unique
        if (!composants.containsKey(id)) {
            comp = new Composant(id, com);
            composants.put(id, comp);
        }
        else {
            System.out.println("Error: Le nom du composant doit etre unique.");
            System.exit(0);
        }
    }
    [
        <OPENPAR>
        t=<ID> 
        <CLOSEPAR>
        { 
            id2 = ReadVal(t); 
            //Checks if propriatary composant exists and is different than created composant
            if (composants.containsKey(id2) && id2!=comp.getName()) {
            Composant origComp = composants.get(id2);
            origComp.addComposant(id, comp);
            }
            else{
                System.out.println("Error: Composant proprietaire indefini.");
                System.exit(0);
            }
        }
    ]
    <SEMICOLON>
    {return comp;}
}

void Prop(Composant comp) :
{
    Token t;
    int N = 20;
    String id[] = new String[N];
    String type[] = new String[N];
    int i = 0, j = 0;
}
{
    (
        ( 
            /*ASSEMBLE ATT NAMES*/
            t=<ID> {id[i++]=ReadVal(t);}
            (
                <COMMA>
                t=<ID> {id[i++]=ReadVal(t);}
            )*
        )
        <DOUBLEDOT> 
            /*ASSEMBLE ATT TYPES*/
        (
            /*CASE OF : 1 KNOWN TYPE*/
            t=<ID> {
                type[0]=ReadVal(t);
                Attribut att = null;
                for(int c1=0 ; c1<i ; c1++){
                    att = attFactory.createAttribut(id[c1],type[0]);
                    if(att != null){
                        comp.addAttribut(id[c1], att);
                    }
                    else{
                        System.out.println("Error: Type attribut indefini.");
                        System.exit(0);
                    }
                }
            }
            |
            /*CASE OF : MULTIPLE STRING TYPES*/
            <OPENTAG> 
            t=<ID> {type[j++] = ReadVal(t);}
            (
                <COMMA>
                t=<ID> {type[j++] = ReadVal(t);}
            )*
            <CLOSETAG>
            {
                Attribut att = null;
                for(int c1=0 ; c1<i ; c1++){
                    att = attFactory.createAttribut(id[c1],"list");
                    if(att != null){
                        List attl = (List)att;
                        attl.setValues(new HashSet<String>(Arrays.asList(type)));
                        comp.addAttribut(id[c1], attl);
                    }
                    else{
                        System.out.println("Error: Type attribut indefini.");
                        System.exit(0);
                    }
                }
            }
        )
        <SEMICOLON>
        {i = 0; j = 0;}
    )+
}

void Evet(Composant comp) :
{
    Token t;
    String act, att1, op, att2, att, aff;
    Attribut attr = null, attr1 = null;
}
{
    (
        LOOKAHEAD(2)
        t=<ACTION> {act=ReadVal(t);} [ <OPENPAR> <ID> <CLOSEPAR> ]
        <OPENTAG> 
        <IF> t=<ID> {
            att1=ReadVal(t);
            attr1 = getAttribut(comp, att1);
        }
        (t=<EQUAL> | t=<NOTEQUAL>) {op=ReadVal(t);} 
        t=<ID> {att2=ReadVal(t);} <THEN> 
        t=<ID> {
            att=ReadVal(t);
            attr = getAttribut(comp, att);
        } <ASSIGN> t=<ID> {aff=ReadVal(t);}
        ((<PLUS> | <OPERATION>) (<ID> | <NUMBER>))*
        <CLOSETAG>
        {
            Condition cond = new Condition(attr1, op, att2);
            Action action = new Action(act, cond, attr, aff);
            comp.addAction(act, action);
        }
        |
        t=<ID> {att=ReadVal(t);} <ASSIGN> t=<ID> {aff=ReadVal(t); Assign(comp,att,aff);}

    )*
}
Attribut getAttribut(Composant comp, String att):
{}
{
    {
        if (comp.attExists(att)) return comp.getAttribut(att);
        else {
            System.out.println("Erreur: Attribut indefini.");
            System.exit(0);
            return null;
        }
        
    }
}
void Assign(Composant comp, String att, String aff) : 
{
    Attribut attr = getAttribut(comp, att);
}
{   
    {attr.setValue(aff);}
}

void Expression() :
{
    Token t;
    String act, comp, next;
}
{
        
        (
            <ACTION> <OPENPAR> <ID> <CLOSEPAR> 
            |   
            <OPENTAG> Expression() <CLOSETAG>
        )
        (LOOKAHEAD(2) ( <SEMICOLON> | <NEXTACTION> | <PLUS> ) Expression())* 
}
