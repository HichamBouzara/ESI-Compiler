options {
  STATIC = false;

}
PARSER_BEGIN(EsiParser)
import java.io.PrintStream ;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.*;
import java.io.PrintWriter;
import java.io.File;
import java.io.IOException;

class EsiParser {
    public static void main(String[] args) throws ParseException, TokenMgrError {
        //Reader reader = new StringReader(args[0]);
        EsiParser parser = new EsiParser(System.in);
        parser.Start(System.out);
    }
    String output;
    HashMap<String, Composant> composants = new HashMap<String, Composant>();
    AttributFactory attFactory = new AttributFactory();
    //Pour la generation de l'automate
    HashMap<Key, String> automata = new HashMap<Key, String>();
    int statesCounter = 1;
    int end = -1, endState = -1, state = 0;
    Stack<Integer> stack = new Stack<Integer>();
}
PARSER_END(EsiParser)

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n"}
TOKEN : 
{ < #LETTER : ["a"-"z"] | ["A"-"Z"]  > 
| < NUMBER : (["0"-"9"])+  >
| < SEMICOLON : ";" >
| < DOUBLEDOT : ":" >
| < EQUAL : "=" >
| < NOTEQUAL : "<>" >
| < DOUBLEDOUBLEDOT : <DOUBLEDOT> <DOUBLEDOT> >
| < ASSIGN : <DOUBLEDOT> <EQUAL> >
| < OPENTAG : "{" >
| < CLOSETAG : "}" >
| < OPENPAR : "(" >
| < CLOSEPAR : ")" >
| < COMMA : "," >
| < IF : "if" >
| < THEN : "then" >
| < DEBUT : "DEBUT" >
| < FIN : "FIN" >
| < INTERFACE : "INTERFACE" >
| < INIT : "INITIALISATIONS" >
| < ACT : "ACTIONS" >
| < PLUS : "+" >
| < ACTION : "Click" | "DbClick" | "ChrKeyPress" | "NumKeyPress" | "EntrerKeyPress" | "Drag" | "Drop" >
| <NEXTACTION : ";" | "~">
| < COMP : "COMP" >
| < OPERATION : "-" | "/" | "*" >
| < EVET : "EVET" | "EVT" > 
| < PROP : "PROP">
| <COMPONENT : "Fenêtre" | "boite Dialogue" | "panel" | "Bouton" | "Champs Texte" |
                "Combo Box" | "Liste Déroulante" | "case A cochet" | "Bouton Radio" | "Icône" >
| < ID : (<LETTER>)+(<LETTER>|<NUMBER>)*  >
                 }

void Start(PrintStream printStream) :
{}
{
    Interface()
    Inits()
    Actions()
    <FIN>
    {
        System.out.println("*********************************************************************************************");
        System.out.println("Compilation ended with success.");
        try{
            //GENERATION DE TABLE DE TRANSITIONS
            int m, n;
            String[][] transitions = new String[statesCounter][statesCounter];
            PrintWriter writer = new PrintWriter("automaton.aef", "ISO-8859-1");
            writer.print("          ");
            for( m=0 ; m < statesCounter ; m++){
                writer.print("S" + Integer.toString(m) + "    ");
                for (n=0 ; n < statesCounter ; n++) transitions[m][n] = "  x ";
            }
            writer.println("");

            for(Key key : automata.keySet()){

                transitions[key.getDebut()][key.getFin()] = automata.get(key);
            }
            for(m=0 ; m < statesCounter ; m++){
                writer.print("S" + Integer.toString(m) + "      ");
                if (m < 10) writer.print(" ");
                for(n=0 ; n<statesCounter ; n++){
                    if(n>10) writer.print(" ");
                    writer.print(transitions[m][n] + "  ");
                }
                writer.println("");
            }
        
            writer.close();
            System.out.println("Generated finite-state automaton in file: automaton.aef");

            //GENERATION DE TABLE DES COMPOSANTS 
            writer = new PrintWriter("composants.gui", "ISO-8859-1");
            writer.print("NOM COMPOSANT   |  TYPE COMPOSANT         |                   ATTRIBUTS");
            writer.println("");
            writer.print("__________________________________________________________________________________________________________________");
            writer.println("");
            writer.println("");

            for(Composant composant : composants.values()){
                writer.print(composant.getName() + "          |          ");
                writer.print(composant.getType() + "          |          ");
                for(Attribut attribut : composant.getAttributs().values()){
                    if(attribut instanceof Bool) {
                        Bool boolAtt = (Bool)attribut;
                        writer.print(boolAtt.getName() + " = "+ Boolean.toString(boolAtt.getValue()) + "    ,   " );
                    }
                    else if (attribut instanceof Int) {
                        Int numAtt = (Int)attribut;
                        writer.print(numAtt.getName() + " = "+ Integer.toString(numAtt.getValue()) + "    ,   " );
                    }
                    else if (attribut instanceof List) {
                        List listAtt = (List)attribut;
                        writer.print(listAtt.getName() + " = "+ listAtt.getValue() + "    ,   " );
                    }
                }
                writer.println("");
            }
        
            writer.close();
            System.out.println("Generated list of composants in file: composants.gui");

        }
        catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("*********************************************************************************************");

    }
}

String ReadVal(Token t) :
{}
{
    { return String.valueOf(t.image); }
}

void Interface() :
{
    Composant comp = null;
}
{
    <DEBUT> <INTERFACE>
    (
        comp = Comp()
        (
            <PROP>
            Prop(comp)
            <EVET>
            Evet(comp)
        )
    )+
} 

void Inits() :
{
    Token t;
    String name, prop, val;
}
{
    <INIT>
    (
        t=<ID> {name=ReadVal(t);} 
        <DOUBLEDOUBLEDOT> t=<ID> {prop=ReadVal(t);} 
        <ASSIGN> 
        (
            t=<ID>
            |
            t=<NUMBER>
        )
        {
            val = ReadVal(t);
            if(composants.containsKey(name)){
                Composant comp = composants.get(name);
                Attribut attr = getAttribut(comp, prop);
                attr.setValue(val);
            }else{
                System.out.println("Erreur: Initialisation sur un composant inexistant.");
                System.exit(0);
            }
        }
        <SEMICOLON> 
    )+
}

void Actions() :
{
    stack.push(state);
}
{
    <ACT>
    (Expression())+
}

Composant Comp() :
{
    Token t;
    String id, id2, com;
    Composant comp = null;
}
{
    <COMP> t=<ID> { id = ReadVal(t); } <DOUBLEDOT> t=<COMPONENT> 
    { 
        com = ReadVal(t); 
        //composant name unique
        if (!composants.containsKey(id)) {
            comp = new Composant(id, com);
            composants.put(id, comp);
        }
        else {
            System.out.println("Error: Le nom du composant doit etre unique.");
            System.exit(0);
        }
    }
    [
        <OPENPAR>
        t=<ID> 
        <CLOSEPAR>
        { 
            id2 = ReadVal(t); 
            //Checks if propriatary composant exists and is different than created composant
            if (composants.containsKey(id2) && id2!=comp.getName()) {
            Composant origComp = composants.get(id2);
            origComp.addComposant(id, comp);
            }
            else{
                System.out.println("Error: Composant proprietaire indefini.");
                System.exit(0);
            }
        }
    ]
    <SEMICOLON>
    {return comp;}
}

void Prop(Composant comp) :
{
    Token t;
    int N = 20;
    String id[] = new String[N];
    String type[] = new String[N];
    int i = 0, j = 0;
    Attribut att = null;
}
{
    (
        ( 
            /*ASSEMBLE ATT NAMES*/
            t=<ID> {id[i++]=ReadVal(t);}
            (
                <COMMA>
                t=<ID> {id[i++]=ReadVal(t);}
            )*
        )
        <DOUBLEDOT> 
            /*ASSEMBLE ATT TYPES*/
        (
            /*CASE OF : 1 KNOWN TYPE*/
            t=<ID> {
                type[0]=ReadVal(t);
                for(int c1=0 ; c1<i ; c1++){
                    att = attFactory.createAttribut(id[c1],type[0]);
                    if(att != null){
                        comp.addAttribut(id[c1], att);
                    }
                    else{
                        System.out.println("Error: Type attribut indefini.");
                        System.exit(0);
                    }
                }
            }
            |
            /*CASE OF : MULTIPLE STRING TYPES*/
            <OPENTAG> 
            t=<ID> {type[j++] = ReadVal(t);}
            (
                <COMMA>
                t=<ID> {type[j++] = ReadVal(t);}
            )*
            <CLOSETAG>
            {
                for(int c1=0 ; c1<i ; c1++){
                    att = attFactory.createAttribut(id[c1],"list");
                    if(att != null){
                        List attl = (List)att;
                        attl.setValues(new HashSet<String>(Arrays.asList(type)));
                        comp.addAttribut(id[c1], attl);
                    }
                    else{
                        System.out.println("Error: Type attribut indefini.");
                        System.exit(0);
                    }
                }
            }
        )
        <SEMICOLON>
        {i = 0; j = 0;}
    )+
}

void Evet(Composant comp) :
{
    Token t;
    String act, att1 = "", op = "=", att2 = "", att, aff;
    Attribut attr = null, attr1 = null;
}
{
    (
        LOOKAHEAD(2)
        t=<ACTION> {act=ReadVal(t);} [ <OPENPAR> <ID> <CLOSEPAR> ]
        <OPENTAG> 
        [
            <IF> t=<ID> {
                att1=ReadVal(t);
                attr1 = getAttribut(comp, att1);
            }
            (t=<EQUAL> | t=<NOTEQUAL>) {op=ReadVal(t);} 
            t=<ID> {att2=ReadVal(t);} <THEN>
        ]
         
        t=<ID> {
            att=ReadVal(t);
            attr = getAttribut(comp, att);
        } <ASSIGN> (t=<ID> | t=<NUMBER>) {aff=ReadVal(t);}
        ((<PLUS> | <OPERATION>) (<ID> | <NUMBER>))*
        <CLOSETAG>
        {
            Condition cond = new Condition(attr1, op, att2);
            Action action = new Action(act, cond, attr, aff);
            comp.addAction(act, action);
        }

    )*
}
Attribut getAttribut(Composant comp, String att):
{}
{
    {
        if (comp.attExists(att)) return comp.getAttribut(att);
        else {
            System.out.println("Erreur: Attribut indefini.");
            System.exit(0);
            return null;
        }
        
    }
}


void Expression() :
{
    Token t;
    String act, name;
    Key key = new Key();
}
{
        
        (
            (
            t=<ACTION> {act=ReadVal(t);} <OPENPAR> t=<ID> {name=ReadVal(t);} <CLOSEPAR>
            {
                if(composants.containsKey(name)){
                    Composant comp = composants.get(name);
                    if(comp.actionExists(act)){
                        comp.action(act);
                        //Pour l'automate
                        key.debut(state);
                        if (end != -1 && endState == -1) {
                            state = end;
                            end = -1;
                        }
                        else state = statesCounter++;
                        key.fin(state);
                        automata.put(key, act); 
                    }else{
                        System.out.println("Erreur: Action sur composant inexistante.");
                        System.exit(0);
                    }
                }else{
                    System.out.println("Erreur: Action sur un composant inexistant.");
                    System.exit(0);
                }
            } 
            )
            |  
            (
            <OPENTAG>
            {
                state = statesCounter++;
                if(end != -1 && endState == -1) endState = state;
                stack.push(state);
            }
            Expression() <CLOSETAG>
            {
                if( ((Integer)stack.peek()) == endState) {
                    key.debut(state);
                    state = end;
                    key.fin(end);
                    automata.put(key, "vide");
                    end = -1;
                    endState = -1;
                }   
                stack.pop();
            }
            ) 
        )
        (
            LOOKAHEAD(2) ( t=<SEMICOLON> | t=<NEXTACTION> | t=<PLUS> ) 
            {
                String nextaction = ReadVal(t);
                switch(nextaction){
                    case ";":   
                                break;
                    case "~":   end = state;
                                state = (Integer)stack.peek();
                                break;
                    case "+":   state = (Integer)stack.peek();
                                break;
                }
            }
            Expression()
        )* 
}
